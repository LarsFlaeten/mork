// GLSL include file for light objects and calculations


// Uniform directional light (distance to light source ~= infinity)
// No attenuation
struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

// Light emitted from a point source in all directions
struct PointLight {    
    vec3 position;
    
	// Light attenuation
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

// Point source light with an angle limited light cone
// and smoothing off between cutOff angle and outerCutoff angle
struct SpotLight {
    vec3 position;  
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
	// Light attenuation
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
    float constant;
    float linear;
    float quadratic;
};     

vec3 CalcDirLight(DirLight _light, vec3 _normal, vec3 _viewDir, TexturedMaterial _material, vec2 _texCoords)
{
    vec3 lightDir = normalize(-_light.direction);
    // diffuse shading
    float diff = max(dot(_normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, _normal);
    float spec = pow(max(dot(_viewDir, reflectDir), 0.0), _material.shininess);
    // combine results
    vec3 ambient  = _light.ambient  * vec3(texture(_material.diffuseMap, _texCoords));
    vec3 diffuse  = _light.diffuse  * diff * vec3(texture(_material.diffuseMap, _texCoords));
    vec3 specular = _light.specular * spec * vec3(texture(_material.specularMap, _texCoords));
    return (ambient + diffuse + specular);
}

vec3 CalcPointLight(PointLight _light, vec3 _normal, vec3 _fragPos, vec3 _viewDir, TexturedMaterial _material, vec2 _texCoords)
{
    vec3 lightDir = normalize(_light.position - _fragPos);
    // diffuse shading
    float diff = max(dot(_normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, _normal);
    float spec = pow(max(dot(_viewDir, reflectDir), 0.0), _material.shininess);
    // attenuation
    float distance    = length(_light.position - _fragPos);
    float attenuation = 1.0 / (_light.constant + _light.linear * distance + 
  			     _light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = _light.ambient  * vec3(texture(_material.diffuseMap, _texCoords));
    vec3 diffuse  = _light.diffuse  * diff * vec3(texture(_material.diffuseMap, _texCoords));
    vec3 specular = _light.specular * spec * vec3(texture(_material.specularMap, _texCoords));
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 

vec3 CalcSpotLight(SpotLight _light, vec3 _normal, vec3 _fragPos, vec3 _viewPos, TexturedMaterial _material, vec2 _texCoords)
{
	vec3 lightDir = normalize(_light.position - _fragPos);
    
    // check if lighting is inside the spotlight cone
    float theta = dot(lightDir, normalize(-_light.direction)); 
    
    float epsilon = _light.cutOff - _light.outerCutOff;
    float intensity = clamp((theta - _light.outerCutOff)/epsilon, 0.0, 1.0);


    if(theta > _light.outerCutOff) // remember that we're working with angles as cosines instead of degrees so a '>' is used.
    {    
        // ambient
        vec3 ambient = _light.ambient * texture(_material.diffuseMap, _texCoords).rgb;
        
        // diffuse 
        vec3 norm = normalize(_normal);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = _light.diffuse * intensity * diff * texture(_material.diffuseMap, _texCoords).rgb;  
        
        // specular
        vec3 viewDir = normalize(_viewPos - _fragPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), _material.shininess);
        vec3 specular = _light.specular * intensity * spec * texture(_material.specularMap, _texCoords).rgb;  
        
        // attenuation
        float distance    = length(_light.position - _fragPos);
        float attenuation = 1.0 / (_light.constant + _light.linear * distance + _light.quadratic * (distance * distance));    

        // ambient  *= attenuation; // remove attenuation from ambient, as otherwise at large distances the light would be darker inside than outside the spotlight due the ambient term in the else branche
        diffuse   *= attenuation;
        specular *= attenuation;   
            
        vec3 result = ambient + diffuse + specular;
        return result;
    }
    else 
    {
        // else, use ambient light so scene isn't completely dark outside the spotlight.
        return _light.ambient * texture(_material.diffuseMap, _texCoords).rgb;
    }
}
